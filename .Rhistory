str_view_all_match(countries, pattern="(a|e){2}") # alternative
```
### Position indicators
- `^` corresponds to the __start__ of the line.
- `$` corresponds to the __end__ of the line.
Countries that end in "land":
```{r}
str_view_all_match(countries, pattern = "land$")
str_view_all_match(countries, pattern = "$") # just shows the end
```
Countries that start with "Ca":
```{r}
str_view_all_match(countries, pattern = "^Ca")
```
Countries without a vowel? The word should start with a non-vowel, continue as a non-vowel, and end:
```{r}
str_view_all_match(countries, "^[^aeiouAEIOU]*$")
# * means repeat over and over
```
### Groups
We can refer to parentheses groups:
```{r}
str_view_all(c("abad", "abbd"),
pattern="(a)(b)\\1")
str_view_all(c("abad", "abbd"),
pattern="(a)(b)\\2")
```
Note that the parentheses are first resolved, THEN referred to. NOT re-executed.
```{r}
str_view_all(c("bananas"), "(.)(.)\\1\\2.*\\1\\2")
```
We can refer to them later in the search, too:
```{r}
str_view_all(c("bananas", "Who can? Bananas can."), "(.)(.)\\1\\2.*\\1\\2")
```
test_that("folder names are length 6.", {
expect_true(all(str_length(folders) == 6))
})
(folders <- str_c("/cm1", num))
(num <- str_pad(1:12, width = 2, side = "left", pad = "0"))
(folders <- str_c("/cm1", num))
test_that("folder names are length 6.", {
expect_true(all(str_length(folders) == 6))
})
(files <- str_c(folders, "README.md"))
for (folder in folders) dir.create(here::here(folder))
install.packages("here")
for (folder in folders) dir.create(here::here(folder))
(files <- str_c(folders, "README.md"))
cat(contents[1]) # see what the first entry in the vector looks like
contents <- str_c("# Participation\n\n Participation for class meeting", 1:12)
cat(contents[1]) # see what the first entry in the vector looks like
write(x, file)`:
- `for (i in 1:length(files)) write(contents[i], files[i])
for (i in 1:length(files)) write(contents[i], files[i])
for (i in 1:length(files)) write(contents[i], files[i])
install.packages("here")
content
contents
for (i in 1:length(files)) write(contents[i], files[i])
wd()
is.wd()
getwd()
for (i in 1:length(files)) write(contents[i], files[i])
for (i in 1:length(files)) write(contents[i], files[i])
getwd()
str_view_all(countries, pattern = "i.a", match=TRUE)
library(gapminder)
countries <- levels(gapminder$country)
str_subset(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a", match=TRUE)
str_view_all_match(countries, pattern = "i.a")
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(testthat)
(fox <- str_subset(sentences, pattern = "fox"))
fox
str_split(fox, pattern = " ")
fox %>%
str_split(fox, pattern = " "[[1]]) %>% length()
tibble(fruit) %>%
separate(fruit, into = c("pre", "post"), sep = " ")
tibble(fruit)
tibble(fruit) %>%
separate(fruit, into = c("pre", "post"), sep = " ")
fox %>%
str_replace(patter="fox", replacement = "giraffe")
fruit %>% head
fruit %>%
str_pad(width=7, side="right", pad="$") %>%
head()
str_c(words[1:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ")
str_c(words[3:4], words[5:8], sep=" & ", collapse=", ")
library(gapminder)
countries <- levels(gapminder$country)
str_subset(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a")
str_view_all(countries, pattern = "i.a", match=TRUE)
(files <- str_c(here::here(folders), "/READ.md"))
for (i in 1:length(files)) write(contents[i], files[i])
(num <- str_pad(1:12, width = 2, side = "left", pad = "0"))
(folders <- str_c("/cm1", num))
(folders <- str_c("/cm0", num))
(folders <- str_c("/cm0", num))
test_that("folder names are length 6.", {
expect_true(all(str_length(folders) == 6))
})
(num <- str_pad(3:12, width = 2, side = "left", pad = "0"))
(folders <- str_c("/cm0", num))
(num <- str_pad(3:14, width = 2, side = "left", pad = "0"))
(folders <- str_c("/cm0", num))
test_that("folder names are length 6.", {
expect_true(all(str_length(folders) == 6))
})
#install.packages("here")
for (folder in folders) dir.create(here::here(folder))
(files <- str_c(folders, "README.md"))
contents <- str_c("# Participation\n\n Participation for class meeting", 3:14)
cat(contents[1]) # see what the first entry in the vector looks like
(files <- str_c(here::here(folders), "/READ.md"))
for (i in 1:length(files)) write(contents[i], files[i])
str(got_chars[[1]])
library(repurrrsive) # Contains data examples
library(listviewer) # For viewing JSON/lists interactively
suppressPackageStartupMessages(library(tidyverse)) # Loads purrr, too
library(repurrrsive) # Contains data examples
library(listviewer) # For viewing JSON/lists interactively
(1:10) ^ 2
(1:10) * (1:2)
commute <- c(40, 20, 35, 15)
person <- c("Parveen", "Leo", "Shawn", "Emmotions")
str_c(person, " takes ", commute, " minutes to commute to work.")
# Ugly and error-prone way of doing it with for loops
x <- character(0)
for (i in 1:length(wesanderson)) x[i] <- wesanderson [[i]][1]
x
#str(got_chars)
str(got_chars)
View(got_chars)
jsonedit(got_chars, mode="view")
names(got_chars[[1]])
sqrt(x)
x <- 1:10
sqrt(x)
map(x, sqrt)
sqrt(x)
map(x, sqrt)
map(x, ^)
map(x, ^2)
map(x, ^ 2)
map(x, function(w) w^2)
map_dbl(x, sqrt)
# Output the results of the function as a dbl (decimal)
map_dbl(x, sqrt)
map_chr(x, str_c, "potato.", sep="-")
?map_chr
# Method 1
vec1 <- function(x) x[1]
map_chr(wesanderson, vec1)
## Method 2: head
map_chr(wesanderson, head, n=1)
## Method 3:
map_chr(wesanderson, `[`(1, x))  # subsetting function
## Method 3:
map_chr(wesanderson, `[`(1)  # subsetting function
## Method 3:
map_chr(wesanderson, `[`,(1)  # subsetting function
## Method 3:
map_chr(wesanderson, `[`,1)  # subsetting function
map_chr(wesanderson, 1) # %>% unname()
map_chr(wesanderson, 1) %>% unname()
map(got_chars, "titles")
got_chars %>%
map("titles")
map(got_chars, `[`, desired_info])
map(got_chars, `[`, desired_info)
desired_info <- c("name", "born")
map(got_chars, `[`, desired_info)
map_dfr(got_chars, `[`, desired_info)
got_chars %>% {
tibble(
name = map_chr(., "name"),
born = map_chr(., "born")
)
}
?map_chr
got_chars %>% {
tibble(
name = map_chr(., "name"),
born = map_chr(., "born")
)
}
map2(a, b, function(x, y) x*y)
suppressPackageStartupMessages(library(tidyverse))
library(repurrrsive)
a <- c(1,2,3)
b <- c(4,5,6)
map2(a, b, function(x, y) x*y)
map2(a, b, ~ .x * .y)
map2(a, b, `*`)
map2_dbl(a, b, `*`)
a <- c(1,2,3)
b <- c(4,5,6)
c <- c(7,8,9)
pmap(list(a, b, c), function(x, y, z) x*y*z)
commute <- c(10, 50, 35)
name <- c("Parveen", "Kayden", "Shawn")
str_c(name, " takes ", commute, " minutes to get to work.")
map2(commute, name, function(x, y) str_c(name, " takes ", commute, " minutes to get to work.")
)
map2(commute, name, function(x, y)
str_c(name, " takes ", commute, " minutes to get to work.")
)
str_c(name, " takes ", commute, " minutes to get to work.")
map2_chr(name, commute, comm_fun)
map2_chr(name, commute, comm_fun)
comm_fun <- function(x,y)
str_c(name, " takes ", commute, " minutes to get to work.")
map2_chr(name, commute, comm_fun)
str_c(x, " takes ", y, " minutes to get to work.")
comm_fun <- function(x,y)
str_c(x, " takes ", y, " minutes to get to work.")
map2_chr(name, commute, comm_fun)
comm_fun <- function(x,y) {
str_c(x, " takes ", y, " minutes to get to work.")
}
map2_chr(name, commute, comm_fun)
str_c(s, " takes ", t, " minutes to get to work.")
map2_chr(name, commute, comm_fun)
comm_fun <- function(s,t) {
str_c(s, " takes ", t, " minutes to get to work.")
}
map2_chr(name, commute, comm_fun)
map2_chr(name, commute, function(t, s) {
str_c(s, " takes ", t, " minutes to get to work.")
})
map2_chr(name, commute, ~ str_c(.x, " takes ", .y. " minutes to get to work"))
map2_chr(name, commute, ~ str_c(.x, " takes ", .y. " minutes to get to work."))
map2_chr(name, commute, ~ str_c(.x, " takes ", .y. " minutes to get to work."))
map2_chr(name, commute, ~ str_c(.x, " takes ", .y " minutes to get to work."))
map2_chr(name, commute, ~ str_c(.x, " takes ", .y, " minutes to get to work."))
(listcol_tib <- tibble(
a = c(1,2,3),
b = list(1,2,3),
c = list(sum, sqrt, str_c),
d = list(x=1, y=sum, z=iris)
))
str(listcol_tib)
print(listcol_tib$a)  # Vector
print(listcol_tib$b)  # List
got_chars[1]
got_chars[[1]]
#got_chars[[1]]
got_alias <- got_chars %>% {
tibble(name = map_chr(., "name")) #subset the name field
}
got_alias
#got_chars[[1]]
#iterate over every person, subset the name field, and then the aliases field, and put them both into tibbles
got_alias <- got_chars %>% {
tibble(name = map_chr(., "name"),
aliases = map(., "aliases"))
}
got_alias
(alias_list <- got_alias$aliases)
names(alias_list) <- got_alias$name
alias_list
alias_list[["melisandre"]]
alias_list[["Melisandre"]]
alias_list
got_alias %>%
setNames(.$aliases, .$name)
got_alias %>%
{setNames(.$aliases, .$name)}
got_alias %>%
{setNames(.$aliases, .$name)} %>%
`[[`("Melisandre")
?setNames
got_alias
(icecream <- tibble(
name = c("Jacob", "Elena", "Mitchell"),
flav = list(c("strawberry", "chocolate", "lemon"),
c("straciatella", "strawberry"),
c("garlic", "tiger tail"))
))
icecream %>%
unnest(flav)
icecream %>%
unnest(flav) %>%
filter(flav == "strawberry")
icecream %>%
filter(map_lgl(flav, ~ any(.x == "strawberry")))
?map_lgl
str(got_alias)
got_alias %>%
drop_na()
str(got_alias)
got_alias %>%
drop_na() %>%
unnest()
suppressPackageStartupMessages(library(tidyverse))
library(repurrrsive)
a <- c(1,2,3)
b <- c(4,5,6)
map2(a, b, function(x, y) x*y)
map2(a, b, ~ .x * .y)
map2(a, b, `*`)
map2_dbl(a, b, `*`)
a <- c(1,2,3)
b <- c(4,5,6)
c <- c(7,8,9)
pmap(list(a, b, c), function(x, y, z) x*y*z)
# note that x,y,z in the function are dummy variables and could be anything (i.e, x1, x2, x3)
# have to use ..1, ..2 etc. for pmap (instead of .x and .y)
pmap(list(a, b, c), ~ ..1 * ..2 * ..3)
pmap_dbl(list(a, b, c), ~ ..1 * ..2 * ..3)
commute <- c(10, 50, 35)
name <- c("Parveen", "Kayden", "Shawn")
str_c(name, " takes ", commute, " minutes to get to work.")
comm_fun <- function(s,t) {
str_c(s, " takes ", t, " minutes to get to work.")
}
map2_chr(name, commute, comm_fun)
map2_chr(name, commute, function(t, s) {
str_c(s, " takes ", t, " minutes to get to work.")
})
map2_chr(name, commute, ~ str_c(.x, " takes ", .y, " minutes to get to work."))
(listcol_tib <- tibble(
a = c(1,2,3),
b = list(1,2,3),
c = list(sum, sqrt, str_c),
d = list(x=1, y=sum, z=iris)
))
str(listcol_tib)
print(listcol_tib$a)  # Vector
print(listcol_tib$b)  # List
#got_chars[[1]]
#iterate over every person, subset the name field, and then the aliases field, and put them both into tibbles
got_alias <- got_chars %>% {
tibble(name = map_chr(., "name"),
aliases = map(., "aliases"))
}
got_alias
(alias_list <- got_alias$aliases)
names(alias_list) <- got_alias$name
alias_list
alias_list[["Melisandre"]]
got_alias %>%
{setNames(.$aliases, .$name)} %>%
`[[`("Melisandre")
got_alias
(icecream <- tibble(
name = c("Jacob", "Elena", "Mitchell"),
flav = list(c("strawberry", "chocolate", "lemon"),
c("straciatella", "strawberry"),
c("garlic", "tiger tail"))
))
icecream %>%
unnest(flav)
icecream %>%
unnest(flav) %>%
filter(flav == "strawberry")
icecream %>%
filter(map_lgl(flav, ~ any(.x == "strawberry")))
iris %>%
group_by(Species) %>%
nest()
install.packages("devtools")
install.packages("powers")
install.packages("shiny")
shiny::runApp('bcl')
runApp('bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
str(tags)
runApp('STAT_547/cm107/bcl')
# Define UI for application that draws a histogram
ui <- fluidPage(
"This is some text",
"This is more text.",
tags$h1("Level 1 header"),
h1("Level 1 header, pt 2")
)
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
library(tags)
# Define UI for application that draws a histogram
ui <- fluidPage(
tags$b("This is some text"),
tags$i("This is more text."),
tags$h1("Level 1 header"), # call function from tags package
h1("Level 1 header, pt 2"), # use shortcut (recommended)
h1(em("Level 1 header, pt 2")), # italics
HTML("<h1>Level 1 header, part 3</h1>") # write your own html
)
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
shiny::runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
ui <- fluidPage(
titlePanel("BC Liquor price app",
windowTitle = "BCL app"),
sidebarLayout(
sidebarPanel("This text is in the sidebar."),
mainPanel("This text is in the main panel.")
)
)
runApp('STAT_547/cm107/bcl')
ui <- fluidPage(
titlePanel("BC Liquor price app",
windowTitle = "BCL app"),
sidebarLayout(
sidebarPanel("This text is in the sidebar."),
mainPanel("This text is in the main panel.")
)
)
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
# Define server logic required to draw a histogram
server <- function(input, output) {
output$price_hist <- renderPlot(ggplot2::qplot(bcl$Price))
}
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
shiny::runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
# Run the application
shinyApp(ui = ui, server = server)
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
runApp('STAT_547/cm107/bcl')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='smc-test-shiny', token='F4B4A4544A449854F48E9AC6DF248235', secret='y71ZoDaIfTxOuDXcT9k3z8wCVnKRSLpM9GtNEqCV')
knitr::opts_chunk$set(echo = TRUE)
inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
?source
source('C:/Users/schignel/Sync/UBC/PhD/Classes/2018W-Term1/STAT 545A - Data Wrangling in R/stat545_participation/STAT_547/cm109/cm109-automation_examples/01_automation-example_just-r/00_download-data.R', echo=TRUE)
# Download the raw data
library(downloader)
download(url = "http://bit.ly/lotr_raw-tsv", destfile = "lotr_raw.tsv")
install.packages("downloader")
# Download the raw data
library(downloader)
download(url = "http://bit.ly/lotr_raw-tsv", destfile = "lotr_raw.tsv")
setwd()
setwd("STAT_547/cm109/cm109-automation_examples/01_automation-example_just-r/")
source('C:/Users/schignel/Sync/UBC/PhD/Classes/2018W-Term1/STAT 545A - Data Wrangling in R/stat545_participation/STAT_547/cm109/cm109-automation_examples/01_automation-example_just-r/00_download-data.R', echo=TRUE)
## one script to rule them all
## clean out any previous work
outputs <- c("lotr_raw.tsv",                     # 00_download-data.R
"lotr_clean.tsv",                   # 01_filter-reorder-plot.R
"total-words-by-film-race.tsv",     # 02_aggregate-plot.R
list.files(pattern = "*.png$"))
file.remove(outputs)
## one script to rule them all
## clean out any previous work
outputs <- c("lotr_raw.tsv",                     # 00_download-data.R
"lotr_clean.tsv",                   # 01_filter-reorder-plot.R
"total-words-by-film-race.tsv",     # 02_aggregate-plot.R
list.files(pattern = "*.png$"))
file.remove(outputs)
## run my scripts
source("00_download-data.R")
source("01_filter-reorder-plot.R")
source("02_aggregate-plot.R")
source('C:/Users/schignel/Sync/UBC/PhD/Classes/2018W-Term1/STAT 545A - Data Wrangling in R/stat545_participation/STAT_547/cm109/cm109-automation_examples/01_automation-example_just-r/Makefile.R', echo=TRUE)
